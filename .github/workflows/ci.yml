name: Meshery Linkerd
on:
  push:
    branches:
      - 'master'
    tags:
      - 'v*'
  pull_request:
    branches:
      - 'master'
jobs:
  golangci:
    name: golangci-lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v1
        with:
          # Required: the version of golangci-lint is required and must be specified without patch version: we always use the latest patch version.
          version: v1.29

          # Optional: working directory, useful for monorepos
          # working-directory: somedir

          # Optional: golangci-lint command line arguments.
          # args: --issues-exit-code=0

          # Optional: show only new issues if it's a pull request. The default value is `false`.
          # only-new-issues: true
  tests:
    name: tests
    runs-on: ubuntu-latest
    needs: [golangci]
    steps:
      - name: Check out code
        uses: actions/checkout@master
        with:
          fetch-depth: 1
      - name: Setup Go
        uses: actions/setup-go@v1
        with:
          go-version: ${{ secrets.GO_VERSION }}
      - name: Cache node modules
        uses: actions/cache@v1
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Create cluster using KinD
        uses: engineerd/setup-kind@v0.3.0
        with:
          version: "v0.7.0"
      - run: |
          export CURRENTCONTEXT="$(kubectl config current-context)"
          echo "current-context:" ${CURRENTCONTEXT}
          export KUBECONFIG="${HOME}/.kube/config"
          echo "environment-kubeconfig:" ${KUBECONFIG}
          GOPROXY=direct GOSUMDB=off GO111MODULE=on go test ./... -v

  docker:
    name: Docker build and push
    runs-on: ubuntu-latest
    needs: [golangci,tests]
    steps:
    - name: Check out code
      uses: actions/checkout@master
      with:
        fetch-depth: 1
    - name: Docker login
      uses: azure/docker-login@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    - name: Docker edge build & tag
      if: startsWith(github.ref, 'refs/tags/') != true && success()
      run: |
        DOCKER_BUILDKIT=1 docker build --no-cache -t ${{ secrets.IMAGE_NAME }}:edge-latest --build-arg GIT_COMMITSHA=${GITHUB_SHA::7} .
        docker tag ${{ secrets.IMAGE_NAME }}:edge-latest ${{ secrets.IMAGE_NAME }}:edge-${GITHUB_SHA::7}
    - name: Docker edge push
      if: startsWith(github.ref, 'refs/tags/') != true && success()
      run: |
        docker push ${{ secrets.IMAGE_NAME }}:edge-latest
        docker push ${{ secrets.IMAGE_NAME }}:edge-${GITHUB_SHA::7}
    - name: Docker stable build & tag
      if: github.event_name != 'pull_request' && startsWith(github.ref, 'refs/tags/') && success()
      run: |
        DOCKER_BUILDKIT=1 docker build --no-cache -t ${{ secrets.IMAGE_NAME }}:stable-latest .
        docker tag ${{ secrets.IMAGE_NAME }}:stable-latest ${{ secrets.IMAGE_NAME }}:stable-${GITHUB_REF/refs\/tags\//}
        docker tag ${{ secrets.IMAGE_NAME }}:stable-latest ${{ secrets.IMAGE_NAME }}:stable-${GITHUB_SHA::7}
    - name: Docker stable push
      if: github.event_name != 'pull_request' && startsWith(github.ref, 'refs/tags/') && success()
      run: |
        docker push ${{ secrets.IMAGE_NAME }}:stable-latest
        docker push ${{ secrets.IMAGE_NAME }}:stable-${GITHUB_REF/refs\/tags\//}
        docker push ${{ secrets.IMAGE_NAME }}:stable-${GITHUB_SHA::7}
    - name: Docker Hub Description
      if: github.event_name != 'pull_request' && startsWith(github.ref, 'refs/tags/') && success()
      uses: peter-evans/dockerhub-description@v2.0.0
      env:
        DOCKERHUB_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKERHUB_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        DOCKERHUB_REPOSITORY: ${{ secrets.IMAGE_NAME }}        